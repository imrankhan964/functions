// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Token is ERC20, Ownable {

    // Events
    event TokensMinted(address indexed to, uint256 sum);
    event TokensBurned(address indexed sender, uint256 sum);
    event TokensTransferred(address indexed sender, address indexed acceptor, uint256 sum);

    // Constructor
    constructor(address creator) ERC20("Rocky", "RK") Ownable(creator) {
        _mint(creator, 500); 
    }

    // Mint function
    function mint(address acceptor, uint256 sum) external {
        require(acceptor != address(0), "Invalid address.");
        require(sum > 0, "Sum must be positive.");
        require(msg.sender == owner(), "No one can mint tokens other than the owner.");

        _mint(acceptor, sum);
        emit TokensMinted(acceptor, sum);
    }

    // Burn function
    function burn(uint256 sum) external {
        require(sum > 0, "Sum must be positive.");
        require(sum <= balanceOf(msg.sender), "Insufficient balance.");

        _burn(msg.sender, sum);
        emit TokensBurned(msg.sender, sum);
    }

    // Transfer function (inherits from ERC20)
    function transfer(address acceptor, uint256 sum) public override returns (bool) {
        require(acceptor != address(0), "Invalid address.");
        require(sum > 0, "Sum must be positive.");
        require(sum <= balanceOf(msg.sender), "Insufficient balance.");

        bool success = super.transfer(acceptor, sum);
        require(success, "Transfered succesfully"); 

        emit TokensTransferred(msg.sender, acceptor, sum);
        return true;
    }


}
